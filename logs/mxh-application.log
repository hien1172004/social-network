2025-06-23 00:00:00 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.group_name,
        c1_0.is_group,
        c1_0.updated_at 
    from
        conversations c1_0 
    left join
        conversation_members m1_0 
            on c1_0.id=m1_0.conversation_id 
    left join
        messages m2_0 
            on c1_0.id=m2_0.conversation_id 
    where
        m1_0.user_id=? 
    group by
        c1_0.id 
    order by
        coalesce(max(m2_0.created_at), c1_0.created_at) desc,
        (select
            count(ms1_0.id) 
        from
            message_status ms1_0 
        join
            messages m4_0 
                on m4_0.id=ms1_0.message_id 
        where
            m4_0.conversation_id=c1_0.id 
            and ms1_0.user_id=? 
            and ms1_0.is_read=0) desc 
    limit
        ?, ?
2025-06-23 00:00:00 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        * 
    from
        messages as m 
    where
        m.conversation_id = ? 
    order by
        m.created_at desc 
    limit
        1 
2025-06-23 00:00:00 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        count(ms1_0.id) 
    from
        message_status ms1_0 
    join
        messages m1_0 
            on m1_0.id=ms1_0.message_id 
    join
        conversations c1_0 
            on c1_0.id=m1_0.conversation_id 
    where
        c1_0.id=? 
        and ms1_0.user_id=? 
        and ms1_0.is_read=0
2025-06-23 00:00:00 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        m1_0.conversation_id,
        m1_0.id,
        m1_0.admin,
        m1_0.created_at,
        m1_0.user_id,
        m2_0.id,
        m2_0.account_status,
        m2_0.avatar_url,
        m2_0.bio,
        m2_0.created_at,
        m2_0.email,
        m2_0.full_name,
        m2_0.last_active,
        m2_0.password,
        m2_0.phone_number,
        m2_0.public_id,
        m2_0.role,
        m2_0.status,
        m2_0.updated_at,
        m2_0.username,
        m1_0.updated_at 
    from
        conversation_members m1_0 
    left join
        user m2_0 
            on m2_0.id=m1_0.user_id 
    where
        m1_0.conversation_id=?
2025-06-23 00:00:00 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        * 
    from
        messages as m 
    where
        m.conversation_id = ? 
    order by
        m.created_at desc 
    limit
        1 
2025-06-23 00:00:00 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        count(ms1_0.id) 
    from
        message_status ms1_0 
    join
        messages m1_0 
            on m1_0.id=ms1_0.message_id 
    join
        conversations c1_0 
            on c1_0.id=m1_0.conversation_id 
    where
        c1_0.id=? 
        and ms1_0.user_id=? 
        and ms1_0.is_read=0
2025-06-23 00:00:00 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        m1_0.conversation_id,
        m1_0.id,
        m1_0.admin,
        m1_0.created_at,
        m1_0.user_id,
        m2_0.id,
        m2_0.account_status,
        m2_0.avatar_url,
        m2_0.bio,
        m2_0.created_at,
        m2_0.email,
        m2_0.full_name,
        m2_0.last_active,
        m2_0.password,
        m2_0.phone_number,
        m2_0.public_id,
        m2_0.role,
        m2_0.status,
        m2_0.updated_at,
        m2_0.username,
        m1_0.updated_at 
    from
        conversation_members m1_0 
    left join
        user m2_0 
            on m2_0.id=m1_0.user_id 
    where
        m1_0.conversation_id=?
2025-06-23 00:00:00 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        * 
    from
        messages as m 
    where
        m.conversation_id = ? 
    order by
        m.created_at desc 
    limit
        1 
2025-06-23 00:00:00 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        count(ms1_0.id) 
    from
        message_status ms1_0 
    join
        messages m1_0 
            on m1_0.id=ms1_0.message_id 
    join
        conversations c1_0 
            on c1_0.id=m1_0.conversation_id 
    where
        c1_0.id=? 
        and ms1_0.user_id=? 
        and ms1_0.is_read=0
2025-06-23 00:00:00 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        m1_0.conversation_id,
        m1_0.id,
        m1_0.admin,
        m1_0.created_at,
        m1_0.user_id,
        m2_0.id,
        m2_0.account_status,
        m2_0.avatar_url,
        m2_0.bio,
        m2_0.created_at,
        m2_0.email,
        m2_0.full_name,
        m2_0.last_active,
        m2_0.password,
        m2_0.phone_number,
        m2_0.public_id,
        m2_0.role,
        m2_0.status,
        m2_0.updated_at,
        m2_0.username,
        m1_0.updated_at 
    from
        conversation_members m1_0 
    left join
        user m2_0 
            on m2_0.id=m1_0.user_id 
    where
        m1_0.conversation_id=?
2025-06-23 00:00:07 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:01:07 [MessageBroker-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:02:07 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:03:07 [MessageBroker-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:04:07 [MessageBroker-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:05:07 [MessageBroker-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:06:07 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:07:07 [MessageBroker-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:07:57 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.group_name,
        c1_0.is_group,
        c1_0.updated_at 
    from
        conversations c1_0 
    where
        c1_0.id=?
2025-06-23 00:07:57 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        cm1_0.id 
    from
        conversation_members cm1_0 
    left join
        conversations c1_0 
            on c1_0.id=cm1_0.conversation_id 
    left join
        user m1_0 
            on m1_0.id=cm1_0.user_id 
    where
        c1_0.id=? 
        and m1_0.id=? 
        and cm1_0.admin=? 
    limit
        ?
2025-06-23 00:07:57 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id in (?)
2025-06-23 00:07:57 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        conversation_members
        (admin, conversation_id, created_at, user_id, updated_at) 
    values
        (?, ?, ?, ?, ?)
2025-06-23 00:07:57 [http-nio-8080-exec-5] INFO  b.e.m.s.impl.ConversationServiceImpl - Add member to conversation
2025-06-23 00:08:07 [MessageBroker-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:08:55 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.group_name,
        c1_0.is_group,
        c1_0.updated_at 
    from
        conversations c1_0 
    where
        c1_0.id=?
2025-06-23 00:08:55 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        cm1_0.id 
    from
        conversation_members cm1_0 
    left join
        conversations c1_0 
            on c1_0.id=cm1_0.conversation_id 
    left join
        user m1_0 
            on m1_0.id=cm1_0.user_id 
    where
        c1_0.id=? 
        and m1_0.id=? 
        and cm1_0.admin=? 
    limit
        ?
2025-06-23 00:08:55 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        cm1_0.id,
        cm1_0.admin,
        cm1_0.conversation_id,
        cm1_0.created_at,
        cm1_0.user_id,
        cm1_0.updated_at 
    from
        conversation_members cm1_0 
    left join
        conversations c1_0 
            on c1_0.id=cm1_0.conversation_id 
    left join
        user m1_0 
            on m1_0.id=cm1_0.user_id 
    where
        c1_0.id=? 
        and m1_0.id=?
2025-06-23 00:08:55 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 00:08:55 [http-nio-8080-exec-6] INFO  b.e.m.s.impl.ConversationServiceImpl - Remove member: 5
2025-06-23 00:08:55 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    delete 
    from
        conversation_members 
    where
        id=?
2025-06-23 00:09:07 [MessageBroker-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:09:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.group_name,
        c1_0.is_group,
        c1_0.updated_at 
    from
        conversations c1_0 
    where
        c1_0.id=?
2025-06-23 00:09:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        cm1_0.id 
    from
        conversation_members cm1_0 
    left join
        conversations c1_0 
            on c1_0.id=cm1_0.conversation_id 
    left join
        user m1_0 
            on m1_0.id=cm1_0.user_id 
    where
        c1_0.id=? 
        and m1_0.id=? 
        and cm1_0.admin=? 
    limit
        ?
2025-06-23 00:09:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        cm1_0.id,
        cm1_0.admin,
        cm1_0.conversation_id,
        cm1_0.created_at,
        cm1_0.user_id,
        cm1_0.updated_at 
    from
        conversation_members cm1_0 
    left join
        conversations c1_0 
            on c1_0.id=cm1_0.conversation_id 
    left join
        user m1_0 
            on m1_0.id=cm1_0.user_id 
    where
        c1_0.id=? 
        and m1_0.id=?
2025-06-23 00:09:29 [http-nio-8080-exec-7] INFO  b.e.m.s.impl.ConversationServiceImpl - Remove member: 5
2025-06-23 00:09:31 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.group_name,
        c1_0.is_group,
        c1_0.updated_at 
    from
        conversations c1_0 
    where
        c1_0.id=?
2025-06-23 00:09:31 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        cm1_0.id 
    from
        conversation_members cm1_0 
    left join
        conversations c1_0 
            on c1_0.id=cm1_0.conversation_id 
    left join
        user m1_0 
            on m1_0.id=cm1_0.user_id 
    where
        c1_0.id=? 
        and m1_0.id=? 
        and cm1_0.admin=? 
    limit
        ?
2025-06-23 00:09:31 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        cm1_0.id,
        cm1_0.admin,
        cm1_0.conversation_id,
        cm1_0.created_at,
        cm1_0.user_id,
        cm1_0.updated_at 
    from
        conversation_members cm1_0 
    left join
        conversations c1_0 
            on c1_0.id=cm1_0.conversation_id 
    left join
        user m1_0 
            on m1_0.id=cm1_0.user_id 
    where
        c1_0.id=? 
        and m1_0.id=?
2025-06-23 00:09:31 [http-nio-8080-exec-2] INFO  b.e.m.s.impl.ConversationServiceImpl - Remove member: 5
2025-06-23 00:10:07 [MessageBroker-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:11:07 [MessageBroker-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:12:07 [MessageBroker-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:12:18 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-06-23 00:12:18 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@379e6639]]
2025-06-23 00:12:18 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-06-23 00:12:18 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-23 00:12:18 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-23 00:12:18 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-23 00:12:20 [main] INFO  backend.example.mxh.MxhApplication - Starting MxhApplication using Java 22.0.2 with PID 12148 (D:\mxh\target\classes started by Admin in D:\mxh)
2025-06-23 00:12:20 [main] DEBUG backend.example.mxh.MxhApplication - Running with Spring Boot v3.2.4, Spring v6.1.5
2025-06-23 00:12:20 [main] INFO  backend.example.mxh.MxhApplication - The following 1 profile is active: "dev"
2025-06-23 00:12:21 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-23 00:12:21 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 102 ms. Found 11 JPA repository interfaces.
2025-06-23 00:12:22 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-23 00:12:22 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1975 ms
2025-06-23 00:12:22 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-23 00:12:22 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-23 00:12:22 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-23 00:12:22 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-23 00:12:22 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-23 00:12:22 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@4f356b98
2025-06-23 00:12:22 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-23 00:12:23 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-23 00:12:23 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-23 00:12:24 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-23 00:12:24 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-23 00:12:24 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-23 00:12:26 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-23 00:12:27 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-23 00:12:27 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-06-23 00:12:27 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@309b4b89]]
2025-06-23 00:12:27 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-06-23 00:12:27 [main] INFO  backend.example.mxh.MxhApplication - Started MxhApplication in 7.358 seconds (process running for 8.159)
2025-06-23 00:12:27 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:12:31 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.group_name,
        c1_0.is_group,
        c1_0.updated_at 
    from
        conversations c1_0 
    where
        c1_0.id=?
2025-06-23 00:12:31 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        cm1_0.id 
    from
        conversation_members cm1_0 
    left join
        conversations c1_0 
            on c1_0.id=cm1_0.conversation_id 
    left join
        user m1_0 
            on m1_0.id=cm1_0.user_id 
    where
        c1_0.id=? 
        and m1_0.id=? 
        and cm1_0.admin=? 
    limit
        ?
2025-06-23 00:12:31 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        cm1_0.id,
        cm1_0.admin,
        cm1_0.conversation_id,
        cm1_0.created_at,
        cm1_0.user_id,
        cm1_0.updated_at 
    from
        conversation_members cm1_0 
    left join
        conversations c1_0 
            on c1_0.id=cm1_0.conversation_id 
    left join
        user m1_0 
            on m1_0.id=cm1_0.user_id 
    where
        c1_0.id=? 
        and m1_0.id=?
2025-06-23 00:12:31 [http-nio-8080-exec-2] INFO  b.e.m.s.impl.ConversationServiceImpl - Remove member: 5
2025-06-23 00:13:27 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:14:27 [MessageBroker-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:15:27 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:15:52 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-06-23 00:15:52 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@309b4b89]]
2025-06-23 00:15:52 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-06-23 00:15:52 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-23 00:15:52 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-23 00:15:52 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-23 00:15:56 [main] INFO  backend.example.mxh.MxhApplication - Starting MxhApplication using Java 22.0.2 with PID 13420 (D:\mxh\target\classes started by Admin in D:\mxh)
2025-06-23 00:15:56 [main] DEBUG backend.example.mxh.MxhApplication - Running with Spring Boot v3.2.4, Spring v6.1.5
2025-06-23 00:15:56 [main] INFO  backend.example.mxh.MxhApplication - The following 1 profile is active: "dev"
2025-06-23 00:15:57 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-23 00:15:57 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 110 ms. Found 11 JPA repository interfaces.
2025-06-23 00:15:58 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-23 00:15:58 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1898 ms
2025-06-23 00:15:59 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-23 00:15:59 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-23 00:15:59 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-23 00:15:59 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-23 00:15:59 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-23 00:15:59 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@55397d15
2025-06-23 00:15:59 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-23 00:15:59 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-23 00:15:59 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-23 00:16:00 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-23 00:16:00 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-23 00:16:01 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-23 00:16:02 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-23 00:16:03 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-23 00:16:03 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-06-23 00:16:03 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@7201108f]]
2025-06-23 00:16:03 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-06-23 00:16:03 [main] INFO  backend.example.mxh.MxhApplication - Started MxhApplication in 7.007 seconds (process running for 7.501)
2025-06-23 00:16:03 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:16:05 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.group_name,
        c1_0.is_group,
        c1_0.updated_at 
    from
        conversations c1_0 
    where
        c1_0.id=?
2025-06-23 00:16:05 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        cm1_0.id 
    from
        conversation_members cm1_0 
    left join
        conversations c1_0 
            on c1_0.id=cm1_0.conversation_id 
    left join
        user m1_0 
            on m1_0.id=cm1_0.user_id 
    where
        c1_0.id=? 
        and m1_0.id=? 
        and cm1_0.admin=? 
    limit
        ?
2025-06-23 00:16:05 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        cm1_0.id,
        cm1_0.admin,
        cm1_0.conversation_id,
        cm1_0.created_at,
        cm1_0.user_id,
        cm1_0.updated_at 
    from
        conversation_members cm1_0 
    left join
        conversations c1_0 
            on c1_0.id=cm1_0.conversation_id 
    left join
        user m1_0 
            on m1_0.id=cm1_0.user_id 
    where
        c1_0.id=? 
        and m1_0.id=?
2025-06-23 00:16:05 [http-nio-8080-exec-3] INFO  b.e.m.s.impl.ConversationServiceImpl - Remove member: 5
2025-06-23 00:17:03 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:18:03 [MessageBroker-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:19:03 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:19:09 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-06-23 00:19:09 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@7201108f]]
2025-06-23 00:19:09 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-06-23 00:19:09 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-23 00:19:09 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-23 00:19:09 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-23 00:19:11 [main] INFO  backend.example.mxh.MxhApplication - Starting MxhApplication using Java 22.0.2 with PID 11844 (D:\mxh\target\classes started by Admin in D:\mxh)
2025-06-23 00:19:11 [main] DEBUG backend.example.mxh.MxhApplication - Running with Spring Boot v3.2.4, Spring v6.1.5
2025-06-23 00:19:11 [main] INFO  backend.example.mxh.MxhApplication - The following 1 profile is active: "dev"
2025-06-23 00:19:12 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-23 00:19:12 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 105 ms. Found 11 JPA repository interfaces.
2025-06-23 00:19:13 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-23 00:19:13 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2169 ms
2025-06-23 00:19:14 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-23 00:19:14 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-23 00:19:14 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-23 00:19:14 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-23 00:19:14 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-23 00:19:14 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@5e360c3b
2025-06-23 00:19:14 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-23 00:19:14 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-23 00:19:14 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-23 00:19:15 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-23 00:19:15 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-23 00:19:16 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-23 00:19:17 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-23 00:19:18 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-23 00:19:18 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-06-23 00:19:18 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@334e5403]]
2025-06-23 00:19:18 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-06-23 00:19:18 [main] INFO  backend.example.mxh.MxhApplication - Started MxhApplication in 7.585 seconds (process running for 8.128)
2025-06-23 00:19:18 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:19:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.group_name,
        c1_0.is_group,
        c1_0.updated_at 
    from
        conversations c1_0 
    where
        c1_0.id=?
2025-06-23 00:19:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        cm1_0.id 
    from
        conversation_members cm1_0 
    left join
        conversations c1_0 
            on c1_0.id=cm1_0.conversation_id 
    left join
        user m1_0 
            on m1_0.id=cm1_0.user_id 
    where
        c1_0.id=? 
        and m1_0.id=? 
        and cm1_0.admin=? 
    limit
        ?
2025-06-23 00:19:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        cm1_0.id,
        cm1_0.admin,
        cm1_0.conversation_id,
        cm1_0.created_at,
        cm1_0.user_id,
        cm1_0.updated_at 
    from
        conversation_members cm1_0 
    left join
        conversations c1_0 
            on c1_0.id=cm1_0.conversation_id 
    left join
        user m1_0 
            on m1_0.id=cm1_0.user_id 
    where
        c1_0.id=? 
        and m1_0.id=?
2025-06-23 00:19:20 [http-nio-8080-exec-2] INFO  b.e.m.s.impl.ConversationServiceImpl - Remove member: 5
2025-06-23 00:20:18 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:21:18 [MessageBroker-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:22:18 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:23:18 [MessageBroker-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:24:18 [MessageBroker-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:25:18 [MessageBroker-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:26:18 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:27:18 [MessageBroker-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:28:18 [MessageBroker-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:29:18 [MessageBroker-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:30:18 [MessageBroker-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:31:18 [MessageBroker-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:32:18 [MessageBroker-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:33:18 [MessageBroker-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:33:30 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-06-23 00:33:30 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@334e5403]]
2025-06-23 00:33:30 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-06-23 00:33:30 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-23 00:33:30 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-23 00:33:30 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-23 00:33:34 [main] INFO  backend.example.mxh.MxhApplication - Starting MxhApplication using Java 22.0.2 with PID 8136 (D:\mxh\target\classes started by Admin in D:\mxh)
2025-06-23 00:33:34 [main] DEBUG backend.example.mxh.MxhApplication - Running with Spring Boot v3.2.4, Spring v6.1.5
2025-06-23 00:33:34 [main] INFO  backend.example.mxh.MxhApplication - The following 1 profile is active: "dev"
2025-06-23 00:33:35 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-23 00:33:35 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 79 ms. Found 11 JPA repository interfaces.
2025-06-23 00:33:36 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-23 00:33:36 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1773 ms
2025-06-23 00:33:36 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-23 00:33:36 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-23 00:33:37 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-23 00:33:37 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-23 00:33:37 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-23 00:33:37 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@55397d15
2025-06-23 00:33:37 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-23 00:33:37 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-23 00:33:37 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-23 00:33:38 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-23 00:33:38 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-23 00:33:39 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-23 00:33:40 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-23 00:33:41 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-23 00:33:41 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-06-23 00:33:41 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@747f6990]]
2025-06-23 00:33:41 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-06-23 00:33:41 [main] INFO  backend.example.mxh.MxhApplication - Started MxhApplication in 7.258 seconds (process running for 7.779)
2025-06-23 00:33:41 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:33:43 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.group_name,
        c1_0.is_group,
        c1_0.updated_at 
    from
        conversations c1_0 
    where
        c1_0.id=?
2025-06-23 00:33:43 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        cm1_0.id 
    from
        conversation_members cm1_0 
    left join
        conversations c1_0 
            on c1_0.id=cm1_0.conversation_id 
    left join
        user m1_0 
            on m1_0.id=cm1_0.user_id 
    where
        c1_0.id=? 
        and m1_0.id=? 
        and cm1_0.admin=? 
    limit
        ?
2025-06-23 00:33:43 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        cm1_0.id,
        cm1_0.admin,
        cm1_0.conversation_id,
        cm1_0.created_at,
        cm1_0.user_id,
        cm1_0.updated_at 
    from
        conversation_members cm1_0 
    left join
        conversations c1_0 
            on c1_0.id=cm1_0.conversation_id 
    left join
        user m1_0 
            on m1_0.id=cm1_0.user_id 
    where
        c1_0.id=? 
        and m1_0.id=?
2025-06-23 00:33:43 [http-nio-8080-exec-3] INFO  b.e.m.s.impl.ConversationServiceImpl - Remove member: 5
2025-06-23 00:34:41 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:35:41 [MessageBroker-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:36:41 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:37:41 [MessageBroker-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:38:17 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-06-23 00:38:17 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@747f6990]]
2025-06-23 00:38:17 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-06-23 00:38:17 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-23 00:38:17 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-23 00:38:17 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-23 00:38:21 [main] INFO  backend.example.mxh.MxhApplication - Starting MxhApplication using Java 22.0.2 with PID 26344 (D:\mxh\target\classes started by Admin in D:\mxh)
2025-06-23 00:38:21 [main] DEBUG backend.example.mxh.MxhApplication - Running with Spring Boot v3.2.4, Spring v6.1.5
2025-06-23 00:38:21 [main] INFO  backend.example.mxh.MxhApplication - The following 1 profile is active: "dev"
2025-06-23 00:38:22 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-23 00:38:22 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 91 ms. Found 11 JPA repository interfaces.
2025-06-23 00:38:23 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-23 00:38:23 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1950 ms
2025-06-23 00:38:23 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-23 00:38:23 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-23 00:38:23 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-23 00:38:23 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-23 00:38:23 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-23 00:38:24 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@4b7e4d14
2025-06-23 00:38:24 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-23 00:38:24 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-23 00:38:24 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-23 00:38:25 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-23 00:38:25 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-23 00:38:25 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-23 00:38:27 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-23 00:38:28 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-23 00:38:28 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-06-23 00:38:28 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@31899998]]
2025-06-23 00:38:28 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-06-23 00:38:28 [main] INFO  backend.example.mxh.MxhApplication - Started MxhApplication in 7.239 seconds (process running for 7.741)
2025-06-23 00:38:28 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:38:30 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.group_name,
        c1_0.is_group,
        c1_0.updated_at 
    from
        conversations c1_0 
    where
        c1_0.id=?
2025-06-23 00:38:30 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        cm1_0.id 
    from
        conversation_members cm1_0 
    left join
        conversations c1_0 
            on c1_0.id=cm1_0.conversation_id 
    left join
        user m1_0 
            on m1_0.id=cm1_0.user_id 
    where
        c1_0.id=? 
        and m1_0.id=? 
        and cm1_0.admin=? 
    limit
        ?
2025-06-23 00:38:30 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    delete 
    from
        conversation_members cm 
    where
        cm.conversation_id = ? 
        and cm.user_id = ? 
2025-06-23 00:38:30 [http-nio-8080-exec-8] INFO  b.e.m.s.impl.ConversationServiceImpl - Remove member: 5
2025-06-23 00:38:59 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.group_name,
        c1_0.is_group,
        c1_0.updated_at 
    from
        conversations c1_0 
    where
        c1_0.id=?
2025-06-23 00:38:59 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        cm1_0.id 
    from
        conversation_members cm1_0 
    left join
        conversations c1_0 
            on c1_0.id=cm1_0.conversation_id 
    left join
        user m1_0 
            on m1_0.id=cm1_0.user_id 
    where
        c1_0.id=? 
        and m1_0.id=? 
        and cm1_0.admin=? 
    limit
        ?
2025-06-23 00:38:59 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    delete 
    from
        conversation_members cm 
    where
        cm.conversation_id = ? 
        and cm.user_id = ? 
2025-06-23 00:38:59 [http-nio-8080-exec-2] INFO  b.e.m.s.impl.ConversationServiceImpl - Remove member: 5
2025-06-23 00:39:00 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.group_name,
        c1_0.is_group,
        c1_0.updated_at 
    from
        conversations c1_0 
    where
        c1_0.id=?
2025-06-23 00:39:00 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        cm1_0.id 
    from
        conversation_members cm1_0 
    left join
        conversations c1_0 
            on c1_0.id=cm1_0.conversation_id 
    left join
        user m1_0 
            on m1_0.id=cm1_0.user_id 
    where
        c1_0.id=? 
        and m1_0.id=? 
        and cm1_0.admin=? 
    limit
        ?
2025-06-23 00:39:00 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    delete 
    from
        conversation_members cm 
    where
        cm.conversation_id = ? 
        and cm.user_id = ? 
2025-06-23 00:39:00 [http-nio-8080-exec-4] INFO  b.e.m.s.impl.ConversationServiceImpl - Remove member: 5
2025-06-23 00:39:01 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.group_name,
        c1_0.is_group,
        c1_0.updated_at 
    from
        conversations c1_0 
    where
        c1_0.id=?
2025-06-23 00:39:01 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        cm1_0.id 
    from
        conversation_members cm1_0 
    left join
        conversations c1_0 
            on c1_0.id=cm1_0.conversation_id 
    left join
        user m1_0 
            on m1_0.id=cm1_0.user_id 
    where
        c1_0.id=? 
        and m1_0.id=? 
        and cm1_0.admin=? 
    limit
        ?
2025-06-23 00:39:01 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    delete 
    from
        conversation_members cm 
    where
        cm.conversation_id = ? 
        and cm.user_id = ? 
2025-06-23 00:39:01 [http-nio-8080-exec-5] INFO  b.e.m.s.impl.ConversationServiceImpl - Remove member: 5
2025-06-23 00:39:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.group_name,
        c1_0.is_group,
        c1_0.updated_at 
    from
        conversations c1_0 
    where
        c1_0.id=?
2025-06-23 00:39:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        cm1_0.id 
    from
        conversation_members cm1_0 
    left join
        conversations c1_0 
            on c1_0.id=cm1_0.conversation_id 
    left join
        user m1_0 
            on m1_0.id=cm1_0.user_id 
    where
        c1_0.id=? 
        and m1_0.id=? 
        and cm1_0.admin=? 
    limit
        ?
2025-06-23 00:39:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    delete 
    from
        conversation_members cm 
    where
        cm.conversation_id = ? 
        and cm.user_id = ? 
2025-06-23 00:39:02 [http-nio-8080-exec-6] INFO  b.e.m.s.impl.ConversationServiceImpl - Remove member: 5
2025-06-23 00:39:03 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.group_name,
        c1_0.is_group,
        c1_0.updated_at 
    from
        conversations c1_0 
    where
        c1_0.id=?
2025-06-23 00:39:03 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        cm1_0.id 
    from
        conversation_members cm1_0 
    left join
        conversations c1_0 
            on c1_0.id=cm1_0.conversation_id 
    left join
        user m1_0 
            on m1_0.id=cm1_0.user_id 
    where
        c1_0.id=? 
        and m1_0.id=? 
        and cm1_0.admin=? 
    limit
        ?
2025-06-23 00:39:03 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    delete 
    from
        conversation_members cm 
    where
        cm.conversation_id = ? 
        and cm.user_id = ? 
2025-06-23 00:39:03 [http-nio-8080-exec-7] INFO  b.e.m.s.impl.ConversationServiceImpl - Remove member: 5
2025-06-23 00:39:19 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-06-23 00:39:19 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@31899998]]
2025-06-23 00:39:19 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-06-23 00:39:19 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-23 00:39:19 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-23 00:39:19 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-23 00:39:23 [main] INFO  backend.example.mxh.MxhApplication - Starting MxhApplication using Java 22.0.2 with PID 19300 (D:\mxh\target\classes started by Admin in D:\mxh)
2025-06-23 00:39:23 [main] DEBUG backend.example.mxh.MxhApplication - Running with Spring Boot v3.2.4, Spring v6.1.5
2025-06-23 00:39:23 [main] INFO  backend.example.mxh.MxhApplication - The following 1 profile is active: "dev"
2025-06-23 00:39:24 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-23 00:39:24 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 97 ms. Found 11 JPA repository interfaces.
2025-06-23 00:39:25 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-23 00:39:25 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2064 ms
2025-06-23 00:39:26 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-23 00:39:26 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-23 00:39:26 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-23 00:39:26 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-23 00:39:26 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-23 00:39:26 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@7de2bdc7
2025-06-23 00:39:26 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-23 00:39:26 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-23 00:39:26 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-23 00:39:27 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-23 00:39:27 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-23 00:39:28 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-23 00:39:29 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-23 00:39:30 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-23 00:39:30 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-06-23 00:39:30 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@10ba182f]]
2025-06-23 00:39:30 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-06-23 00:39:30 [main] INFO  backend.example.mxh.MxhApplication - Started MxhApplication in 7.346 seconds (process running for 7.836)
2025-06-23 00:39:30 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:40:19 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-06-23 00:40:19 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@10ba182f]]
2025-06-23 00:40:19 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-06-23 00:40:19 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-23 00:40:19 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-23 00:40:19 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-23 00:40:39 [main] INFO  backend.example.mxh.MxhApplication - Starting MxhApplication using Java 22.0.2 with PID 17904 (D:\mxh\target\classes started by Admin in D:\mxh)
2025-06-23 00:40:39 [main] DEBUG backend.example.mxh.MxhApplication - Running with Spring Boot v3.2.4, Spring v6.1.5
2025-06-23 00:40:39 [main] INFO  backend.example.mxh.MxhApplication - The following 1 profile is active: "dev"
2025-06-23 00:40:40 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-23 00:40:40 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 91 ms. Found 11 JPA repository interfaces.
2025-06-23 00:40:41 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-23 00:40:41 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1822 ms
2025-06-23 00:40:41 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-23 00:40:41 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-23 00:40:41 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-23 00:40:42 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-23 00:40:42 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-23 00:40:42 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@2b6ee447
2025-06-23 00:40:42 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-23 00:40:42 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-23 00:40:42 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-23 00:40:43 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-23 00:40:43 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-23 00:40:44 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-23 00:40:45 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-23 00:40:46 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-23 00:40:46 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-06-23 00:40:46 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@3135f5dd]]
2025-06-23 00:40:46 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-06-23 00:40:46 [main] INFO  backend.example.mxh.MxhApplication - Started MxhApplication in 7.116 seconds (process running for 7.622)
2025-06-23 00:40:46 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:40:48 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.group_name,
        c1_0.is_group,
        c1_0.updated_at 
    from
        conversations c1_0 
    where
        c1_0.id=?
2025-06-23 00:40:48 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        cm1_0.id 
    from
        conversation_members cm1_0 
    left join
        conversations c1_0 
            on c1_0.id=cm1_0.conversation_id 
    left join
        user m1_0 
            on m1_0.id=cm1_0.user_id 
    where
        c1_0.id=? 
        and m1_0.id=? 
    limit
        ?
2025-06-23 00:40:48 [http-nio-8080-exec-2] WARN  b.e.m.s.impl.ConversationServiceImpl - No member found with conversationId: 1 and memberId: 5
2025-06-23 00:40:48 [http-nio-8080-exec-2] ERROR b.e.m.e.GlobalExceptionHandle - Resource not found: 
backend.example.mxh.exception.ResourceNotFoundException: Member not found in conversation
	at backend.example.mxh.service.impl.ConversationServiceImpl.removeMemberFromConversation(ConversationServiceImpl.java:161)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:392)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at backend.example.mxh.service.impl.ConversationServiceImpl$$SpringCGLIB$$0.removeMemberFromConversation(<generated>)
	at backend.example.mxh.controller.ConversationController.removeMember(ConversationController.java:56)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:925)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doDelete(FrameworkServlet.java:936)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:596)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1570)
2025-06-23 00:41:46 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:42:46 [MessageBroker-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:42:51 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.group_name,
        c1_0.is_group,
        c1_0.updated_at 
    from
        conversations c1_0 
    where
        c1_0.id=?
2025-06-23 00:42:51 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        cm1_0.id 
    from
        conversation_members cm1_0 
    left join
        conversations c1_0 
            on c1_0.id=cm1_0.conversation_id 
    left join
        user m1_0 
            on m1_0.id=cm1_0.user_id 
    where
        c1_0.id=? 
        and m1_0.id=? 
    limit
        ?
2025-06-23 00:42:51 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        cm1_0.id 
    from
        conversation_members cm1_0 
    left join
        conversations c1_0 
            on c1_0.id=cm1_0.conversation_id 
    left join
        user m1_0 
            on m1_0.id=cm1_0.user_id 
    where
        c1_0.id=? 
        and m1_0.id=? 
        and cm1_0.admin=? 
    limit
        ?
2025-06-23 00:42:51 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    delete 
    from
        conversation_members cm 
    where
        cm.conversation_id = ? 
        and cm.user_id = ? 
2025-06-23 00:42:51 [http-nio-8080-exec-5] INFO  b.e.m.s.impl.ConversationServiceImpl - Remove member: 5
2025-06-23 00:43:46 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:44:46 [MessageBroker-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:45:46 [MessageBroker-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:46:46 [MessageBroker-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:46:59 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.created_at,
        c1_0.group_name,
        c1_0.is_group,
        c1_0.updated_at 
    from
        conversations c1_0 
    where
        c1_0.id=?
2025-06-23 00:46:59 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        cm1_0.id,
        cm1_0.admin,
        cm1_0.conversation_id,
        cm1_0.created_at,
        cm1_0.user_id,
        cm1_0.updated_at 
    from
        conversation_members cm1_0 
    left join
        conversations c1_0 
            on c1_0.id=cm1_0.conversation_id 
    left join
        user m1_0 
            on m1_0.id=cm1_0.user_id 
    where
        c1_0.id=? 
        and m1_0.id=?
2025-06-23 00:46:59 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 00:46:59 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    delete 
    from
        conversation_members 
    where
        id=?
2025-06-23 00:46:59 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(cm1_0.id) 
    from
        conversation_members cm1_0 
    left join
        conversations c1_0 
            on c1_0.id=cm1_0.conversation_id 
    where
        c1_0.id=?
2025-06-23 00:47:46 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:48:46 [MessageBroker-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:49:46 [MessageBroker-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:50:46 [MessageBroker-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:51:46 [MessageBroker-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:52:46 [MessageBroker-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:53:46 [MessageBroker-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:54:46 [MessageBroker-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:55:46 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:56:46 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:57:46 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:58:46 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 00:59:46 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 01:00:46 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 01:01:46 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 01:02:46 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 01:03:46 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 01:04:46 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 01:05:46 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 01:05:47 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-06-23 01:05:47 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@3135f5dd]]
2025-06-23 01:05:47 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-06-23 01:05:47 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-23 01:05:47 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-23 01:05:47 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-23 14:54:14 [main] INFO  backend.example.mxh.MxhApplication - Starting MxhApplication using Java 22.0.2 with PID 15196 (D:\mxh\target\classes started by Admin in D:\mxh)
2025-06-23 14:54:14 [main] DEBUG backend.example.mxh.MxhApplication - Running with Spring Boot v3.2.4, Spring v6.1.5
2025-06-23 14:54:14 [main] INFO  backend.example.mxh.MxhApplication - The following 1 profile is active: "dev"
2025-06-23 14:54:15 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-23 14:54:15 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 131 ms. Found 11 JPA repository interfaces.
2025-06-23 14:54:17 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-23 14:54:17 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2956 ms
2025-06-23 14:54:17 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-23 14:54:17 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-23 14:54:17 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-23 14:54:18 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-23 14:54:18 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-23 14:54:18 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@4247093b
2025-06-23 14:54:18 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-23 14:54:18 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-23 14:54:18 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-23 14:54:19 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-23 14:54:20 [main] DEBUG org.hibernate.SQL - 
    alter table conversation_members 
       add column last_deleted_at datetime(6)
2025-06-23 14:54:20 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-23 14:54:20 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-23 14:54:22 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-23 14:54:23 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-23 14:54:23 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-06-23 14:54:23 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@71dfcc99]]
2025-06-23 14:54:23 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-06-23 14:54:23 [main] INFO  backend.example.mxh.MxhApplication - Started MxhApplication in 9.883 seconds (process running for 10.827)
2025-06-23 14:54:23 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 14:54:29 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 14:54:29 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 14:54:29 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        case 
            when count(*) > 0 
                then true 
            else false 
        end 
    from
        friends 
    where
        (
            sender_id = ? 
            and receiver_id = ?
        ) 
        or (
            sender_id = ? 
            and receiver_id = ?
        ) 
2025-06-23 14:54:29 [http-nio-8080-exec-5] ERROR b.e.m.e.GlobalExceptionHandle - ❌ Unknown internal error: 
java.lang.ClassCastException: class java.lang.Long cannot be cast to class java.lang.Boolean (java.lang.Long and java.lang.Boolean are in module java.base of loader 'bootstrap')
	at jdk.proxy2/jdk.proxy2.$Proxy169.existsFriendship(Unknown Source)
	at backend.example.mxh.service.impl.FriendServiceImpl.sendFriendRequest(FriendServiceImpl.java:52)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:392)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at backend.example.mxh.service.impl.FriendServiceImpl$$SpringCGLIB$$0.sendFriendRequest(<generated>)
	at backend.example.mxh.controller.FriendController.sendFriendRequest(FriendController.java:28)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:925)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1570)
2025-06-23 14:55:23 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 14:56:23 [MessageBroker-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 14:57:23 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 14:57:29 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-06-23 14:57:29 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@71dfcc99]]
2025-06-23 14:57:29 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-06-23 14:57:29 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-23 14:57:29 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-23 14:57:29 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-23 14:57:34 [main] INFO  backend.example.mxh.MxhApplication - Starting MxhApplication using Java 22.0.2 with PID 26492 (D:\mxh\target\classes started by Admin in D:\mxh)
2025-06-23 14:57:34 [main] DEBUG backend.example.mxh.MxhApplication - Running with Spring Boot v3.2.4, Spring v6.1.5
2025-06-23 14:57:34 [main] INFO  backend.example.mxh.MxhApplication - The following 1 profile is active: "dev"
2025-06-23 14:57:35 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-23 14:57:35 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 80 ms. Found 11 JPA repository interfaces.
2025-06-23 14:57:35 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-23 14:57:35 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1934 ms
2025-06-23 14:57:36 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-23 14:57:36 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-23 14:57:36 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-23 14:57:36 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-23 14:57:36 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-23 14:57:36 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@54e18a46
2025-06-23 14:57:36 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-23 14:57:36 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-23 14:57:36 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-23 14:57:38 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-23 14:57:38 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-23 14:57:38 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-23 14:57:40 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-23 14:57:41 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-23 14:57:41 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-06-23 14:57:41 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@379e6639]]
2025-06-23 14:57:41 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-06-23 14:57:41 [main] INFO  backend.example.mxh.MxhApplication - Started MxhApplication in 7.612 seconds (process running for 8.109)
2025-06-23 14:57:41 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 14:57:43 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 14:57:43 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 14:57:43 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        case 
            when count(*) > 0 
                then true 
            else false 
        end 
    from
        friends 
    where
        (
            sender_id = ? 
            and receiver_id = ?
        ) 
        or (
            sender_id = ? 
            and receiver_id = ?
        ) 
2025-06-23 14:57:43 [http-nio-8080-exec-2] ERROR b.e.m.e.GlobalExceptionHandle - ❌ Unknown internal error: 
java.lang.IllegalArgumentException: Friend request already exists or already friends.
	at backend.example.mxh.service.impl.FriendServiceImpl.sendFriendRequest(FriendServiceImpl.java:55)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:392)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at backend.example.mxh.service.impl.FriendServiceImpl$$SpringCGLIB$$0.sendFriendRequest(<generated>)
	at backend.example.mxh.controller.FriendController.sendFriendRequest(FriendController.java:28)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:925)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1570)
2025-06-23 14:57:59 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 14:57:59 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 14:57:59 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        case 
            when count(*) > 0 
                then true 
            else false 
        end 
    from
        friends 
    where
        (
            sender_id = ? 
            and receiver_id = ?
        ) 
        or (
            sender_id = ? 
            and receiver_id = ?
        ) 
2025-06-23 14:57:59 [http-nio-8080-exec-3] ERROR b.e.m.e.GlobalExceptionHandle - ❌ Unknown internal error: 
java.lang.IllegalArgumentException: Friend request already exists or already friends.
	at backend.example.mxh.service.impl.FriendServiceImpl.sendFriendRequest(FriendServiceImpl.java:55)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:392)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at backend.example.mxh.service.impl.FriendServiceImpl$$SpringCGLIB$$0.sendFriendRequest(<generated>)
	at backend.example.mxh.controller.FriendController.sendFriendRequest(FriendController.java:28)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:925)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1570)
2025-06-23 14:58:41 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 14:59:01 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-06-23 14:59:01 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@379e6639]]
2025-06-23 14:59:01 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-06-23 14:59:01 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-23 14:59:01 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-23 14:59:01 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-23 14:59:05 [main] INFO  backend.example.mxh.MxhApplication - Starting MxhApplication using Java 22.0.2 with PID 29684 (D:\mxh\target\classes started by Admin in D:\mxh)
2025-06-23 14:59:05 [main] DEBUG backend.example.mxh.MxhApplication - Running with Spring Boot v3.2.4, Spring v6.1.5
2025-06-23 14:59:05 [main] INFO  backend.example.mxh.MxhApplication - The following 1 profile is active: "dev"
2025-06-23 14:59:06 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-23 14:59:06 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 83 ms. Found 11 JPA repository interfaces.
2025-06-23 14:59:07 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-23 14:59:07 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2085 ms
2025-06-23 14:59:08 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-23 14:59:08 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-23 14:59:08 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-23 14:59:08 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-23 14:59:08 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-23 14:59:08 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@5ca4c88a
2025-06-23 14:59:08 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-23 14:59:08 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-23 14:59:08 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-23 14:59:09 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-23 14:59:09 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-23 14:59:10 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-23 14:59:11 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-23 14:59:12 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-23 14:59:12 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-06-23 14:59:12 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@48c176ef]]
2025-06-23 14:59:12 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-06-23 14:59:12 [main] INFO  backend.example.mxh.MxhApplication - Started MxhApplication in 7.691 seconds (process running for 8.232)
2025-06-23 14:59:13 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 14:59:19 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 14:59:19 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 14:59:19 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        case 
            when count(*) > 0 
                then true 
            else false 
        end 
    from
        friends 
    where
        (
            sender_id = ? 
            and receiver_id = ?
        ) 
        or (
            sender_id = ? 
            and receiver_id = ?
        ) 
2025-06-23 14:59:19 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        friends
        (created_at, receiver_id, sender_id, status, updated_at) 
    values
        (?, ?, ?, ?, ?)
2025-06-23 14:59:19 [http-nio-8080-exec-2] INFO  b.e.m.service.impl.FriendServiceImpl - Friend request sent.
2025-06-23 14:59:19 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        notifications
        (content, created_at, is_read, notification_type, receiver_id, reference_id, sender_id, type, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-23 14:59:19 [http-nio-8080-exec-2] INFO  b.e.m.s.impl.NotificationServiceImpl - Created notification: backend.example.mxh.entity.Notification@79f0c460
2025-06-23 15:00:12 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:01:12 [MessageBroker-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:02:12 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:03:12 [MessageBroker-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:04:12 [MessageBroker-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:05:12 [MessageBroker-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:06:12 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:06:50 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-06-23 15:06:50 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@48c176ef]]
2025-06-23 15:06:50 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-06-23 15:06:50 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-23 15:06:50 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-23 15:06:50 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-23 15:06:54 [main] INFO  backend.example.mxh.MxhApplication - Starting MxhApplication using Java 22.0.2 with PID 26040 (D:\mxh\target\classes started by Admin in D:\mxh)
2025-06-23 15:06:54 [main] DEBUG backend.example.mxh.MxhApplication - Running with Spring Boot v3.2.4, Spring v6.1.5
2025-06-23 15:06:54 [main] INFO  backend.example.mxh.MxhApplication - The following 1 profile is active: "dev"
2025-06-23 15:06:55 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-23 15:06:56 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 83 ms. Found 11 JPA repository interfaces.
2025-06-23 15:06:56 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-23 15:06:56 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2110 ms
2025-06-23 15:06:57 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-23 15:06:57 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-23 15:06:57 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-23 15:06:57 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-23 15:06:57 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-23 15:06:57 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@3c116f26
2025-06-23 15:06:57 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-23 15:06:57 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-23 15:06:57 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-23 15:06:59 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-23 15:06:59 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-23 15:06:59 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-23 15:07:01 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-23 15:07:02 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-23 15:07:02 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-06-23 15:07:02 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@55eb10c0]]
2025-06-23 15:07:02 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-06-23 15:07:02 [main] INFO  backend.example.mxh.MxhApplication - Started MxhApplication in 8.495 seconds (process running for 9.003)
2025-06-23 15:07:02 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:07:05 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        f1_0.id,
        f1_0.created_at,
        f1_0.receiver_id,
        f1_0.sender_id,
        f1_0.status,
        f1_0.updated_at 
    from
        friends f1_0 
    left join
        user s1_0 
            on s1_0.id=f1_0.sender_id 
    left join
        user r1_0 
            on r1_0.id=f1_0.receiver_id 
    where
        s1_0.id=? 
        and r1_0.id=?
2025-06-23 15:07:05 [http-nio-8080-exec-2] ERROR b.e.m.e.GlobalExceptionHandle - Resource not found: 
backend.example.mxh.exception.ResourceNotFoundException: Friend request not found
	at backend.example.mxh.service.impl.FriendServiceImpl.lambda$acceptFriendRequest$2(FriendServiceImpl.java:78)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at backend.example.mxh.service.impl.FriendServiceImpl.acceptFriendRequest(FriendServiceImpl.java:78)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:392)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at backend.example.mxh.service.impl.FriendServiceImpl$$SpringCGLIB$$0.acceptFriendRequest(<generated>)
	at backend.example.mxh.controller.FriendController.acceptRequest(FriendController.java:38)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:925)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:925)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:593)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1570)
2025-06-23 15:07:40 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        f1_0.id,
        f1_0.created_at,
        f1_0.receiver_id,
        f1_0.sender_id,
        f1_0.status,
        f1_0.updated_at 
    from
        friends f1_0 
    left join
        user s1_0 
            on s1_0.id=f1_0.sender_id 
    left join
        user r1_0 
            on r1_0.id=f1_0.receiver_id 
    where
        s1_0.id=? 
        and r1_0.id=?
2025-06-23 15:07:40 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 15:07:40 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 15:07:40 [http-nio-8080-exec-6] INFO  b.e.m.service.impl.FriendServiceImpl - Accepted friend request: backend.example.mxh.entity.Friend@63b9dd03
2025-06-23 15:07:41 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    insert 
    into
        notifications
        (content, created_at, is_read, notification_type, receiver_id, reference_id, sender_id, type, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-23 15:07:41 [http-nio-8080-exec-6] INFO  b.e.m.s.impl.NotificationServiceImpl - Created notification: backend.example.mxh.entity.Notification@435a9012
2025-06-23 15:07:41 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    update
        friends 
    set
        created_at=?,
        receiver_id=?,
        sender_id=?,
        status=?,
        updated_at=? 
    where
        id=?
2025-06-23 15:08:02 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:09:02 [MessageBroker-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:10:02 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:11:02 [MessageBroker-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:11:57 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 15:11:57 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 15:11:57 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        case 
            when count(*) > 0 
                then true 
            else false 
        end 
    from
        friends 
    where
        (
            sender_id = ? 
            and receiver_id = ?
        ) 
        or (
            sender_id = ? 
            and receiver_id = ?
        ) 
2025-06-23 15:11:57 [http-nio-8080-exec-5] ERROR b.e.m.e.GlobalExceptionHandle - ❌ Unknown internal error: 
java.lang.IllegalArgumentException: Friend request already exists or already friends.
	at backend.example.mxh.service.impl.FriendServiceImpl.sendFriendRequest(FriendServiceImpl.java:55)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:392)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at backend.example.mxh.service.impl.FriendServiceImpl$$SpringCGLIB$$0.sendFriendRequest(<generated>)
	at backend.example.mxh.controller.FriendController.sendFriendRequest(FriendController.java:28)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:925)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1570)
2025-06-23 15:12:02 [MessageBroker-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:12:23 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 15:12:23 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 15:12:23 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        case 
            when count(*) > 0 
                then true 
            else false 
        end 
    from
        friends 
    where
        (
            sender_id = ? 
            and receiver_id = ?
        ) 
        or (
            sender_id = ? 
            and receiver_id = ?
        ) 
2025-06-23 15:12:23 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    insert 
    into
        friends
        (created_at, receiver_id, sender_id, status, updated_at) 
    values
        (?, ?, ?, ?, ?)
2025-06-23 15:12:23 [http-nio-8080-exec-8] INFO  b.e.m.service.impl.FriendServiceImpl - Friend request sent.
2025-06-23 15:12:23 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    insert 
    into
        notifications
        (content, created_at, is_read, notification_type, receiver_id, reference_id, sender_id, type, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-23 15:12:23 [http-nio-8080-exec-8] INFO  b.e.m.s.impl.NotificationServiceImpl - Created notification: backend.example.mxh.entity.Notification@6e3b5ef1
2025-06-23 15:13:02 [MessageBroker-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:13:20 [http-nio-8080-exec-9] ERROR b.e.m.e.GlobalExceptionHandle - ❌ Unknown internal error: 
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/v1/friends/5/decline/1.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:925)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:593)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1570)
2025-06-23 15:13:51 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-06-23 15:13:51 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@55eb10c0]]
2025-06-23 15:13:51 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-06-23 15:13:51 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-23 15:13:51 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-23 15:13:51 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-23 15:13:56 [main] INFO  backend.example.mxh.MxhApplication - Starting MxhApplication using Java 22.0.2 with PID 19012 (D:\mxh\target\classes started by Admin in D:\mxh)
2025-06-23 15:13:56 [main] DEBUG backend.example.mxh.MxhApplication - Running with Spring Boot v3.2.4, Spring v6.1.5
2025-06-23 15:13:56 [main] INFO  backend.example.mxh.MxhApplication - The following 1 profile is active: "dev"
2025-06-23 15:13:57 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-23 15:13:57 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 111 ms. Found 11 JPA repository interfaces.
2025-06-23 15:13:58 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-23 15:13:58 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2024 ms
2025-06-23 15:13:58 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-23 15:13:58 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-23 15:13:58 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-23 15:13:58 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-23 15:13:58 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-23 15:13:59 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@3c116f26
2025-06-23 15:13:59 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-23 15:13:59 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-23 15:13:59 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-23 15:14:00 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-23 15:14:00 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-23 15:14:01 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-23 15:14:02 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-23 15:14:03 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-23 15:14:03 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-06-23 15:14:03 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@46152f41]]
2025-06-23 15:14:03 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-06-23 15:14:03 [main] INFO  backend.example.mxh.MxhApplication - Started MxhApplication in 7.516 seconds (process running for 8.034)
2025-06-23 15:14:03 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:14:54 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        f1_0.id,
        f1_0.created_at,
        f1_0.receiver_id,
        f1_0.sender_id,
        f1_0.status,
        f1_0.updated_at 
    from
        friends f1_0 
    left join
        user s1_0 
            on s1_0.id=f1_0.sender_id 
    left join
        user r1_0 
            on r1_0.id=f1_0.receiver_id 
    where
        s1_0.id=? 
        and r1_0.id=?
2025-06-23 15:14:54 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 15:14:54 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 15:14:54 [http-nio-8080-exec-1] INFO  b.e.m.service.impl.FriendServiceImpl - decline friend request: backend.example.mxh.entity.Friend@7f9ec4fa
2025-06-23 15:14:54 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    update
        friends 
    set
        created_at=?,
        receiver_id=?,
        sender_id=?,
        status=?,
        updated_at=? 
    where
        id=?
2025-06-23 15:15:03 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:16:03 [MessageBroker-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:17:01 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-06-23 15:17:01 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@46152f41]]
2025-06-23 15:17:01 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-06-23 15:17:01 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-23 15:17:01 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-23 15:17:01 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-23 15:17:05 [main] INFO  backend.example.mxh.MxhApplication - Starting MxhApplication using Java 22.0.2 with PID 4032 (D:\mxh\target\classes started by Admin in D:\mxh)
2025-06-23 15:17:05 [main] DEBUG backend.example.mxh.MxhApplication - Running with Spring Boot v3.2.4, Spring v6.1.5
2025-06-23 15:17:05 [main] INFO  backend.example.mxh.MxhApplication - The following 1 profile is active: "dev"
2025-06-23 15:17:06 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-23 15:17:06 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 81 ms. Found 11 JPA repository interfaces.
2025-06-23 15:17:07 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-23 15:17:07 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1924 ms
2025-06-23 15:17:07 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-23 15:17:07 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-23 15:17:07 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-23 15:17:07 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-23 15:17:07 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-23 15:17:07 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@3c116f26
2025-06-23 15:17:07 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-23 15:17:08 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-23 15:17:08 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-23 15:17:09 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-23 15:17:09 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-23 15:17:09 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-23 15:17:11 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-23 15:17:12 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-23 15:17:12 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-06-23 15:17:12 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@41466b78]]
2025-06-23 15:17:12 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-06-23 15:17:12 [main] INFO  backend.example.mxh.MxhApplication - Started MxhApplication in 7.497 seconds (process running for 8.032)
2025-06-23 15:17:12 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:17:30 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    delete 
    from
        friends 
    where
        (
            (
                sender_id=? 
                and receiver_id=?
            ) 
            or (
                sender_id=? 
                and receiver_id=?
            )
        ) 
        and status=?
2025-06-23 15:17:30 [http-nio-8080-exec-3] INFO  b.e.m.service.impl.FriendServiceImpl - User 1 unfriended user 4
2025-06-23 15:18:12 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:19:12 [MessageBroker-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:20:12 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:21:12 [MessageBroker-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:22:12 [MessageBroker-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:23:12 [MessageBroker-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:24:12 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:25:12 [MessageBroker-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:26:12 [MessageBroker-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:27:03 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-06-23 15:27:03 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@41466b78]]
2025-06-23 15:27:03 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-06-23 15:27:03 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-23 15:27:03 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-23 15:27:03 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-23 15:27:08 [main] INFO  backend.example.mxh.MxhApplication - Starting MxhApplication using Java 22.0.2 with PID 16716 (D:\mxh\target\classes started by Admin in D:\mxh)
2025-06-23 15:27:08 [main] DEBUG backend.example.mxh.MxhApplication - Running with Spring Boot v3.2.4, Spring v6.1.5
2025-06-23 15:27:08 [main] INFO  backend.example.mxh.MxhApplication - The following 1 profile is active: "dev"
2025-06-23 15:27:09 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-23 15:27:09 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 75 ms. Found 11 JPA repository interfaces.
2025-06-23 15:27:10 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-23 15:27:10 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1855 ms
2025-06-23 15:27:10 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-23 15:27:10 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-23 15:27:10 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-23 15:27:11 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-23 15:27:11 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-23 15:27:11 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@1554eaa4
2025-06-23 15:27:11 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-23 15:27:11 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-23 15:27:11 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-23 15:27:12 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-23 15:27:12 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-23 15:27:13 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-23 15:27:14 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-23 15:27:15 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-23 15:27:15 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-06-23 15:27:15 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@105674ab]]
2025-06-23 15:27:15 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-06-23 15:27:15 [main] INFO  backend.example.mxh.MxhApplication - Started MxhApplication in 7.402 seconds (process running for 7.909)
2025-06-23 15:27:15 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:28:03 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-06-23 15:28:03 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@105674ab]]
2025-06-23 15:28:03 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-06-23 15:28:04 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-23 15:28:04 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-23 15:28:04 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-23 15:28:08 [main] INFO  backend.example.mxh.MxhApplication - Starting MxhApplication using Java 22.0.2 with PID 19728 (D:\mxh\target\classes started by Admin in D:\mxh)
2025-06-23 15:28:08 [main] DEBUG backend.example.mxh.MxhApplication - Running with Spring Boot v3.2.4, Spring v6.1.5
2025-06-23 15:28:08 [main] INFO  backend.example.mxh.MxhApplication - The following 1 profile is active: "dev"
2025-06-23 15:28:09 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-23 15:28:09 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 84 ms. Found 11 JPA repository interfaces.
2025-06-23 15:28:10 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-23 15:28:10 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1727 ms
2025-06-23 15:28:10 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-23 15:28:10 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-23 15:28:10 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-23 15:28:10 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-23 15:28:10 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-23 15:28:10 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@62c47480
2025-06-23 15:28:10 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-23 15:28:10 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-23 15:28:10 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-23 15:28:12 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-23 15:28:12 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-23 15:28:12 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-23 15:28:13 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-23 15:28:14 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-23 15:28:14 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-06-23 15:28:14 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@2a59c706]]
2025-06-23 15:28:14 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-06-23 15:28:14 [main] INFO  backend.example.mxh.MxhApplication - Started MxhApplication in 6.852 seconds (process running for 7.347)
2025-06-23 15:28:14 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:28:32 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        f1_0.id,
        f1_0.created_at,
        f1_0.receiver_id,
        f1_0.sender_id,
        f1_0.status,
        f1_0.updated_at 
    from
        friends f1_0 
    left join
        user s1_0 
            on s1_0.id=f1_0.sender_id 
    left join
        user r1_0 
            on r1_0.id=f1_0.receiver_id 
    where
        s1_0.id=? 
        and r1_0.id=? 
        and f1_0.status=?
2025-06-23 15:28:32 [http-nio-8080-exec-1] ERROR b.e.m.e.GlobalExceptionHandle - Resource not found: 
backend.example.mxh.exception.ResourceNotFoundException: Friend request not found
	at backend.example.mxh.service.impl.FriendServiceImpl.lambda$cancelFriendRequest$4(FriendServiceImpl.java:118)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at backend.example.mxh.service.impl.FriendServiceImpl.cancelFriendRequest(FriendServiceImpl.java:117)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:392)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at backend.example.mxh.service.impl.FriendServiceImpl$$SpringCGLIB$$0.cancelFriendRequest(<generated>)
	at backend.example.mxh.controller.FriendController.cancelFriendRequest(FriendController.java:66)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:925)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doDelete(FrameworkServlet.java:936)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:596)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1570)
2025-06-23 15:29:14 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:29:22 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 15:29:22 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 15:29:22 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        case 
            when count(*) > 0 
                then true 
            else false 
        end 
    from
        friends 
    where
        (
            sender_id = ? 
            and receiver_id = ?
        ) 
        or (
            sender_id = ? 
            and receiver_id = ?
        ) 
2025-06-23 15:29:22 [http-nio-8080-exec-3] ERROR b.e.m.e.GlobalExceptionHandle - ❌ Unknown internal error: 
java.lang.IllegalArgumentException: Friend request already exists or already friends.
	at backend.example.mxh.service.impl.FriendServiceImpl.sendFriendRequest(FriendServiceImpl.java:56)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:392)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at backend.example.mxh.service.impl.FriendServiceImpl$$SpringCGLIB$$0.sendFriendRequest(<generated>)
	at backend.example.mxh.controller.FriendController.sendFriendRequest(FriendController.java:28)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:925)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1570)
2025-06-23 15:30:14 [MessageBroker-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:31:14 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:32:14 [MessageBroker-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:33:14 [MessageBroker-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:33:50 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-06-23 15:33:50 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@2a59c706]]
2025-06-23 15:33:50 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-06-23 15:33:50 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-23 15:33:50 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-23 15:33:50 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-23 15:33:54 [main] INFO  backend.example.mxh.MxhApplication - Starting MxhApplication using Java 22.0.2 with PID 4236 (D:\mxh\target\classes started by Admin in D:\mxh)
2025-06-23 15:33:54 [main] DEBUG backend.example.mxh.MxhApplication - Running with Spring Boot v3.2.4, Spring v6.1.5
2025-06-23 15:33:54 [main] INFO  backend.example.mxh.MxhApplication - The following 1 profile is active: "dev"
2025-06-23 15:33:55 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-23 15:33:56 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 89 ms. Found 11 JPA repository interfaces.
2025-06-23 15:33:56 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-23 15:33:56 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1995 ms
2025-06-23 15:33:57 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-23 15:33:57 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-23 15:33:57 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-23 15:33:57 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-23 15:33:57 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-23 15:33:57 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@62c47480
2025-06-23 15:33:57 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-23 15:33:57 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-23 15:33:57 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-23 15:33:58 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-23 15:33:59 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-23 15:33:59 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-23 15:34:01 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-23 15:34:01 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-23 15:34:01 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-06-23 15:34:01 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@16e7ba74]]
2025-06-23 15:34:01 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-06-23 15:34:02 [main] INFO  backend.example.mxh.MxhApplication - Started MxhApplication in 7.494 seconds (process running for 7.985)
2025-06-23 15:34:02 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:34:35 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        f1_0.id,
        f1_0.created_at,
        f1_0.receiver_id,
        f1_0.sender_id,
        f1_0.status,
        f1_0.updated_at 
    from
        friends f1_0 
    where
        f1_0.sender_id=? 
        and f1_0.receiver_id=? 
        and (
            f1_0.status=? 
            or f1_0.status=?
        )
2025-06-23 15:34:35 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 15:34:35 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 15:34:35 [http-nio-8080-exec-4] INFO  b.e.m.service.impl.FriendServiceImpl - User 1 cancelled friend request 5
2025-06-23 15:34:35 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    delete 
    from
        friends 
    where
        id=?
2025-06-23 15:35:02 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:36:02 [MessageBroker-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:37:02 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:38:02 [MessageBroker-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:39:02 [MessageBroker-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:40:02 [MessageBroker-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:41:02 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:42:02 [MessageBroker-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:43:02 [MessageBroker-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:44:02 [MessageBroker-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:44:23 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 15:44:23 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 15:44:23 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        case 
            when count(*) > 0 
                then true 
            else false 
        end 
    from
        friends 
    where
        (
            sender_id = ? 
            and receiver_id = ?
        ) 
        or (
            sender_id = ? 
            and receiver_id = ?
        ) 
2025-06-23 15:44:23 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        friends
        (created_at, receiver_id, sender_id, status, updated_at) 
    values
        (?, ?, ?, ?, ?)
2025-06-23 15:44:23 [http-nio-8080-exec-2] INFO  b.e.m.service.impl.FriendServiceImpl - Friend request sent.
2025-06-23 15:44:23 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        notifications
        (content, created_at, is_read, notification_type, receiver_id, reference_id, sender_id, type, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-23 15:44:23 [http-nio-8080-exec-2] INFO  b.e.m.s.impl.NotificationServiceImpl - Created notification: backend.example.mxh.entity.Notification@1aebaa57
2025-06-23 15:44:28 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 15:44:28 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 15:44:28 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        case 
            when count(*) > 0 
                then true 
            else false 
        end 
    from
        friends 
    where
        (
            sender_id = ? 
            and receiver_id = ?
        ) 
        or (
            sender_id = ? 
            and receiver_id = ?
        ) 
2025-06-23 15:44:28 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    insert 
    into
        friends
        (created_at, receiver_id, sender_id, status, updated_at) 
    values
        (?, ?, ?, ?, ?)
2025-06-23 15:44:28 [http-nio-8080-exec-7] INFO  b.e.m.service.impl.FriendServiceImpl - Friend request sent.
2025-06-23 15:44:28 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    insert 
    into
        notifications
        (content, created_at, is_read, notification_type, receiver_id, reference_id, sender_id, type, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-23 15:44:28 [http-nio-8080-exec-7] INFO  b.e.m.s.impl.NotificationServiceImpl - Created notification: backend.example.mxh.entity.Notification@45ab89a3
2025-06-23 15:44:33 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 15:44:33 [http-nio-8080-exec-5] ERROR b.e.m.e.GlobalExceptionHandle - Resource not found: 
backend.example.mxh.exception.ResourceNotFoundException: Receiver not found
	at backend.example.mxh.service.impl.FriendServiceImpl.lambda$sendFriendRequest$0(FriendServiceImpl.java:47)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at backend.example.mxh.service.impl.FriendServiceImpl.sendFriendRequest(FriendServiceImpl.java:47)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:392)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at backend.example.mxh.service.impl.FriendServiceImpl$$SpringCGLIB$$0.sendFriendRequest(<generated>)
	at backend.example.mxh.controller.FriendController.sendFriendRequest(FriendController.java:28)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:925)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1570)
2025-06-23 15:44:39 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 15:44:39 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 15:44:39 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        case 
            when count(*) > 0 
                then true 
            else false 
        end 
    from
        friends 
    where
        (
            sender_id = ? 
            and receiver_id = ?
        ) 
        or (
            sender_id = ? 
            and receiver_id = ?
        ) 
2025-06-23 15:44:39 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    insert 
    into
        friends
        (created_at, receiver_id, sender_id, status, updated_at) 
    values
        (?, ?, ?, ?, ?)
2025-06-23 15:44:39 [http-nio-8080-exec-8] INFO  b.e.m.service.impl.FriendServiceImpl - Friend request sent.
2025-06-23 15:44:39 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    insert 
    into
        notifications
        (content, created_at, is_read, notification_type, receiver_id, reference_id, sender_id, type, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-23 15:44:39 [http-nio-8080-exec-8] INFO  b.e.m.s.impl.NotificationServiceImpl - Created notification: backend.example.mxh.entity.Notification@38ba54fb
2025-06-23 15:44:48 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 15:44:48 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 15:44:48 [http-nio-8080-exec-9] ERROR b.e.m.e.GlobalExceptionHandle - Resource not found: 
backend.example.mxh.exception.ResourceNotFoundException: Sender not found
	at backend.example.mxh.service.impl.FriendServiceImpl.lambda$sendFriendRequest$1(FriendServiceImpl.java:49)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at backend.example.mxh.service.impl.FriendServiceImpl.sendFriendRequest(FriendServiceImpl.java:49)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:392)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at backend.example.mxh.service.impl.FriendServiceImpl$$SpringCGLIB$$0.sendFriendRequest(<generated>)
	at backend.example.mxh.controller.FriendController.sendFriendRequest(FriendController.java:28)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:925)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1570)
2025-06-23 15:44:58 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 15:44:58 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 15:44:58 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        case 
            when count(*) > 0 
                then true 
            else false 
        end 
    from
        friends 
    where
        (
            sender_id = ? 
            and receiver_id = ?
        ) 
        or (
            sender_id = ? 
            and receiver_id = ?
        ) 
2025-06-23 15:44:58 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    insert 
    into
        friends
        (created_at, receiver_id, sender_id, status, updated_at) 
    values
        (?, ?, ?, ?, ?)
2025-06-23 15:44:58 [http-nio-8080-exec-10] INFO  b.e.m.service.impl.FriendServiceImpl - Friend request sent.
2025-06-23 15:44:58 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    insert 
    into
        notifications
        (content, created_at, is_read, notification_type, receiver_id, reference_id, sender_id, type, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-23 15:44:58 [http-nio-8080-exec-10] INFO  b.e.m.s.impl.NotificationServiceImpl - Created notification: backend.example.mxh.entity.Notification@4da19401
2025-06-23 15:45:02 [MessageBroker-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:45:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        f1_0.id,
        f1_0.created_at,
        f1_0.receiver_id,
        f1_0.sender_id,
        f1_0.status,
        f1_0.updated_at 
    from
        friends f1_0 
    left join
        user s1_0 
            on s1_0.id=f1_0.sender_id 
    left join
        user r1_0 
            on r1_0.id=f1_0.receiver_id 
    where
        s1_0.id=? 
        and r1_0.id=?
2025-06-23 15:45:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 15:45:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 15:45:20 [http-nio-8080-exec-1] INFO  b.e.m.service.impl.FriendServiceImpl - Accepted friend request: backend.example.mxh.entity.Friend@25f2d4f3
2025-06-23 15:45:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        notifications
        (content, created_at, is_read, notification_type, receiver_id, reference_id, sender_id, type, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-23 15:45:20 [http-nio-8080-exec-1] INFO  b.e.m.s.impl.NotificationServiceImpl - Created notification: backend.example.mxh.entity.Notification@7f691abb
2025-06-23 15:45:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    update
        friends 
    set
        created_at=?,
        receiver_id=?,
        sender_id=?,
        status=?,
        updated_at=? 
    where
        id=?
2025-06-23 15:45:31 [http-nio-8080-exec-4] ERROR b.e.m.e.GlobalExceptionHandle - ❌ Unknown internal error: 
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/v1/friends/4/accept.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:925)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:593)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1570)
2025-06-23 15:46:02 [MessageBroker-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:46:13 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        f1_0.id,
        f1_0.created_at,
        f1_0.receiver_id,
        f1_0.sender_id,
        f1_0.status,
        f1_0.updated_at 
    from
        friends f1_0 
    left join
        user s1_0 
            on s1_0.id=f1_0.sender_id 
    left join
        user r1_0 
            on r1_0.id=f1_0.receiver_id 
    where
        s1_0.id=? 
        and r1_0.id=?
2025-06-23 15:46:13 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 15:46:13 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 15:46:13 [http-nio-8080-exec-6] INFO  b.e.m.service.impl.FriendServiceImpl - Accepted friend request: backend.example.mxh.entity.Friend@66e5713a
2025-06-23 15:46:13 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    insert 
    into
        notifications
        (content, created_at, is_read, notification_type, receiver_id, reference_id, sender_id, type, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-23 15:46:13 [http-nio-8080-exec-6] INFO  b.e.m.s.impl.NotificationServiceImpl - Created notification: backend.example.mxh.entity.Notification@731c540b
2025-06-23 15:46:13 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    update
        friends 
    set
        created_at=?,
        receiver_id=?,
        sender_id=?,
        status=?,
        updated_at=? 
    where
        id=?
2025-06-23 15:47:02 [MessageBroker-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:47:21 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-06-23 15:47:21 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@16e7ba74]]
2025-06-23 15:47:21 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-06-23 15:47:21 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-23 15:47:21 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-23 15:47:21 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-23 15:47:25 [main] INFO  backend.example.mxh.MxhApplication - Starting MxhApplication using Java 22.0.2 with PID 32468 (D:\mxh\target\classes started by Admin in D:\mxh)
2025-06-23 15:47:25 [main] DEBUG backend.example.mxh.MxhApplication - Running with Spring Boot v3.2.4, Spring v6.1.5
2025-06-23 15:47:25 [main] INFO  backend.example.mxh.MxhApplication - The following 1 profile is active: "dev"
2025-06-23 15:47:26 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-23 15:47:27 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 114 ms. Found 11 JPA repository interfaces.
2025-06-23 15:47:27 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-23 15:47:28 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2181 ms
2025-06-23 15:47:28 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-23 15:47:28 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-23 15:47:28 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-23 15:47:28 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-23 15:47:28 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-23 15:47:28 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@7db06c50
2025-06-23 15:47:28 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-23 15:47:28 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-23 15:47:28 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-23 15:47:29 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-23 15:47:29 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-23 15:47:30 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-23 15:47:31 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-23 15:47:32 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-23 15:47:32 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-06-23 15:47:32 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@4770bc04]]
2025-06-23 15:47:32 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-06-23 15:47:32 [main] INFO  backend.example.mxh.MxhApplication - Started MxhApplication in 7.445 seconds (process running for 7.953)
2025-06-23 15:47:32 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:47:34 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        case 
            when f1_0.sender_id=? 
                then f1_0.receiver_id 
            else f1_0.sender_id 
        end 
    from
        friends f1_0 
    where
        (
            f1_0.sender_id=? 
            or f1_0.receiver_id=?
        ) 
        and f1_0.status=?
2025-06-23 15:47:34 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        case 
            when f1_0.sender_id=? 
                then f1_0.receiver_id 
            else f1_0.sender_id 
        end 
    from
        friends f1_0 
    where
        (
            f1_0.sender_id=? 
            or f1_0.receiver_id=?
        ) 
        and f1_0.status=?
2025-06-23 15:47:34 [http-nio-8080-exec-1] ERROR b.e.m.e.GlobalExceptionHandle - ❌ Unknown internal error: 
org.springframework.dao.InvalidDataAccessApiUsageException: Page offset exceeds Integer.MAX_VALUE (2147483647)
	at org.springframework.data.jpa.support.PageableUtils.getOffsetAsInteger(PageableUtils.java:42)
	at org.springframework.data.jpa.repository.query.ParameterBinder.bindAndPrepare(ParameterBinder.java:104)
	at org.springframework.data.jpa.repository.query.PartTreeJpaQuery$QueryPreparer.invokeBinding(PartTreeJpaQuery.java:341)
	at org.springframework.data.jpa.repository.query.PartTreeJpaQuery$QueryPreparer.createQuery(PartTreeJpaQuery.java:251)
	at org.springframework.data.jpa.repository.query.PartTreeJpaQuery.doCreateQuery(PartTreeJpaQuery.java:113)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.createQuery(AbstractJpaQuery.java:239)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$PagedExecution.doExecute(JpaQueryExecution.java:202)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:92)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:149)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:137)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:164)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:392)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:135)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy2/jdk.proxy2.$Proxy158.findByIdIn(Unknown Source)
	at backend.example.mxh.service.impl.FriendServiceImpl.getMutualFriends(FriendServiceImpl.java:198)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:392)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at backend.example.mxh.service.impl.FriendServiceImpl$$SpringCGLIB$$0.getMutualFriends(<generated>)
	at backend.example.mxh.controller.FriendController.getMutualFriends(FriendController.java:114)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:925)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1570)
2025-06-23 15:47:58 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        case 
            when f1_0.sender_id=? 
                then f1_0.receiver_id 
            else f1_0.sender_id 
        end 
    from
        friends f1_0 
    where
        (
            f1_0.sender_id=? 
            or f1_0.receiver_id=?
        ) 
        and f1_0.status=?
2025-06-23 15:47:58 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        case 
            when f1_0.sender_id=? 
                then f1_0.receiver_id 
            else f1_0.sender_id 
        end 
    from
        friends f1_0 
    where
        (
            f1_0.sender_id=? 
            or f1_0.receiver_id=?
        ) 
        and f1_0.status=?
2025-06-23 15:47:58 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id in (?) 
    order by
        u1_0.created_at desc 
    limit
        ?, ?
2025-06-23 15:48:18 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        case 
            when f1_0.sender_id=? 
                then f1_0.receiver_id 
            else f1_0.sender_id 
        end 
    from
        friends f1_0 
    where
        (
            f1_0.sender_id=? 
            or f1_0.receiver_id=?
        ) 
        and f1_0.status=?
2025-06-23 15:48:18 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        case 
            when f1_0.sender_id=? 
                then f1_0.receiver_id 
            else f1_0.sender_id 
        end 
    from
        friends f1_0 
    where
        (
            f1_0.sender_id=? 
            or f1_0.receiver_id=?
        ) 
        and f1_0.status=?
2025-06-23 15:48:18 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id in (?) 
    order by
        u1_0.created_at desc 
    limit
        ?, ?
2025-06-23 15:48:27 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        case 
            when f1_0.sender_id=? 
                then f1_0.receiver_id 
            else f1_0.sender_id 
        end 
    from
        friends f1_0 
    where
        (
            f1_0.sender_id=? 
            or f1_0.receiver_id=?
        ) 
        and f1_0.status=?
2025-06-23 15:48:27 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        case 
            when f1_0.sender_id=? 
                then f1_0.receiver_id 
            else f1_0.sender_id 
        end 
    from
        friends f1_0 
    where
        (
            f1_0.sender_id=? 
            or f1_0.receiver_id=?
        ) 
        and f1_0.status=?
2025-06-23 15:48:27 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id in (?) 
    order by
        u1_0.created_at desc 
    limit
        ?, ?
2025-06-23 15:48:32 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        case 
            when f1_0.sender_id=? 
                then f1_0.receiver_id 
            else f1_0.sender_id 
        end 
    from
        friends f1_0 
    where
        (
            f1_0.sender_id=? 
            or f1_0.receiver_id=?
        ) 
        and f1_0.status=?
2025-06-23 15:48:32 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        case 
            when f1_0.sender_id=? 
                then f1_0.receiver_id 
            else f1_0.sender_id 
        end 
    from
        friends f1_0 
    where
        (
            f1_0.sender_id=? 
            or f1_0.receiver_id=?
        ) 
        and f1_0.status=?
2025-06-23 15:48:32 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:49:23 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-06-23 15:49:23 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@4770bc04]]
2025-06-23 15:49:23 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-06-23 15:49:23 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-23 15:49:23 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-23 15:49:23 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-23 15:49:27 [main] INFO  backend.example.mxh.MxhApplication - Starting MxhApplication using Java 22.0.2 with PID 20248 (D:\mxh\target\classes started by Admin in D:\mxh)
2025-06-23 15:49:27 [main] DEBUG backend.example.mxh.MxhApplication - Running with Spring Boot v3.2.4, Spring v6.1.5
2025-06-23 15:49:27 [main] INFO  backend.example.mxh.MxhApplication - The following 1 profile is active: "dev"
2025-06-23 15:49:28 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-23 15:49:28 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 89 ms. Found 11 JPA repository interfaces.
2025-06-23 15:49:29 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-23 15:49:29 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1846 ms
2025-06-23 15:49:30 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-23 15:49:30 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-23 15:49:30 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-23 15:49:30 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-23 15:49:30 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-23 15:49:30 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@5bdb6ea8
2025-06-23 15:49:30 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-23 15:49:30 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-23 15:49:30 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-23 15:49:31 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-23 15:49:31 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-23 15:49:32 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-23 15:49:33 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-23 15:49:34 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-23 15:49:34 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-06-23 15:49:34 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@3a828a27]]
2025-06-23 15:49:34 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-06-23 15:49:34 [main] INFO  backend.example.mxh.MxhApplication - Started MxhApplication in 7.291 seconds (process running for 7.819)
2025-06-23 15:49:34 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:50:20 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-06-23 15:50:20 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@3a828a27]]
2025-06-23 15:50:20 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-06-23 15:50:20 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-23 15:50:20 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-23 15:50:20 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-23 15:50:24 [main] INFO  backend.example.mxh.MxhApplication - Starting MxhApplication using Java 22.0.2 with PID 14844 (D:\mxh\target\classes started by Admin in D:\mxh)
2025-06-23 15:50:24 [main] DEBUG backend.example.mxh.MxhApplication - Running with Spring Boot v3.2.4, Spring v6.1.5
2025-06-23 15:50:24 [main] INFO  backend.example.mxh.MxhApplication - The following 1 profile is active: "dev"
2025-06-23 15:50:25 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-23 15:50:25 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 116 ms. Found 11 JPA repository interfaces.
2025-06-23 15:50:26 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-23 15:50:26 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2041 ms
2025-06-23 15:50:26 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-23 15:50:26 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-23 15:50:26 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-23 15:50:27 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-23 15:50:27 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-23 15:50:27 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@55397d15
2025-06-23 15:50:27 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-23 15:50:27 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-23 15:50:27 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-23 15:50:28 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-23 15:50:28 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-23 15:50:29 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-23 15:50:30 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-23 15:50:31 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-23 15:50:31 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-06-23 15:50:31 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@43443721]]
2025-06-23 15:50:31 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-06-23 15:50:31 [main] INFO  backend.example.mxh.MxhApplication - Started MxhApplication in 7.477 seconds (process running for 8.034)
2025-06-23 15:50:31 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:50:32 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        f1_0.id,
        f1_0.created_at,
        f1_0.receiver_id,
        f1_0.sender_id,
        f1_0.status,
        f1_0.updated_at 
    from
        friends f1_0 
    left join
        user s1_0 
            on s1_0.id=f1_0.sender_id 
    where
        s1_0.id=? 
        and f1_0.status=? 
    order by
        f1_0.created_at desc 
    limit
        ?, ?
2025-06-23 15:50:32 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 15:50:32 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 15:50:32 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 15:51:03 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        f1_0.id,
        f1_0.created_at,
        f1_0.receiver_id,
        f1_0.sender_id,
        f1_0.status,
        f1_0.updated_at 
    from
        friends f1_0 
    left join
        user r1_0 
            on r1_0.id=f1_0.receiver_id 
    where
        r1_0.id=? 
        and f1_0.status=? 
    order by
        f1_0.created_at desc 
    limit
        ?, ?
2025-06-23 15:51:03 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 15:51:03 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 15:51:31 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:52:04 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        friends f1_0 
    where
        (
            f1_0.sender_id=? 
            or f1_0.receiver_id=?
        ) 
        and f1_0.status=?
2025-06-23 15:52:31 [MessageBroker-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:52:47 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        f1_0.id,
        f1_0.created_at,
        f1_0.receiver_id,
        f1_0.sender_id,
        f1_0.status,
        f1_0.updated_at 
    from
        friends f1_0 
    where
        (
            f1_0.sender_id=? 
            or f1_0.receiver_id=?
        ) 
        and f1_0.status=? 
    order by
        f1_0.created_at desc 
    limit
        ?, ?
2025-06-23 15:52:47 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 15:52:47 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 15:52:47 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 15:53:11 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 15:53:11 [http-nio-8080-exec-8] ERROR b.e.m.e.GlobalExceptionHandle - Resource not found: 
backend.example.mxh.exception.ResourceNotFoundException: Receiver not found
	at backend.example.mxh.service.impl.FriendServiceImpl.lambda$sendFriendRequest$0(FriendServiceImpl.java:47)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at backend.example.mxh.service.impl.FriendServiceImpl.sendFriendRequest(FriendServiceImpl.java:47)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:392)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at backend.example.mxh.service.impl.FriendServiceImpl$$SpringCGLIB$$0.sendFriendRequest(<generated>)
	at backend.example.mxh.controller.FriendController.sendFriendRequest(FriendController.java:28)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:925)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1570)
2025-06-23 15:53:15 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 15:53:15 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 15:53:15 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        case 
            when count(*) > 0 
                then true 
            else false 
        end 
    from
        friends 
    where
        (
            sender_id = ? 
            and receiver_id = ?
        ) 
        or (
            sender_id = ? 
            and receiver_id = ?
        ) 
2025-06-23 15:53:15 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    insert 
    into
        friends
        (created_at, receiver_id, sender_id, status, updated_at) 
    values
        (?, ?, ?, ?, ?)
2025-06-23 15:53:15 [http-nio-8080-exec-9] INFO  b.e.m.service.impl.FriendServiceImpl - Friend request sent.
2025-06-23 15:53:15 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    insert 
    into
        notifications
        (content, created_at, is_read, notification_type, receiver_id, reference_id, sender_id, type, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-23 15:53:15 [http-nio-8080-exec-9] INFO  b.e.m.s.impl.NotificationServiceImpl - Created notification: backend.example.mxh.entity.Notification@1c029327
2025-06-23 15:53:22 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 15:53:22 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id=?
2025-06-23 15:53:22 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        case 
            when count(*) > 0 
                then true 
            else false 
        end 
    from
        friends 
    where
        (
            sender_id = ? 
            and receiver_id = ?
        ) 
        or (
            sender_id = ? 
            and receiver_id = ?
        ) 
2025-06-23 15:53:22 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    insert 
    into
        friends
        (created_at, receiver_id, sender_id, status, updated_at) 
    values
        (?, ?, ?, ?, ?)
2025-06-23 15:53:22 [http-nio-8080-exec-10] INFO  b.e.m.service.impl.FriendServiceImpl - Friend request sent.
2025-06-23 15:53:22 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    insert 
    into
        notifications
        (content, created_at, is_read, notification_type, receiver_id, reference_id, sender_id, type, updated_at) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-06-23 15:53:22 [http-nio-8080-exec-10] INFO  b.e.m.s.impl.NotificationServiceImpl - Created notification: backend.example.mxh.entity.Notification@1b3f9f52
2025-06-23 15:53:31 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:54:06 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        distinct f2_0.receiver_id 
    from
        friends f1_0 
    join
        friends f2_0 
            on f1_0.receiver_id=f2_0.sender_id 
    where
        f1_0.sender_id=? 
        and f1_0.status='ACCEPTED' 
        and f2_0.status='ACCEPTED' 
        and f2_0.receiver_id not in (select
            f3_0.receiver_id 
        from
            friends f3_0 
        where
            (f3_0.sender_id=? 
            or f3_0.receiver_id=?)) 
        and f2_0.receiver_id<>?
2025-06-23 15:54:06 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id in (?) 
    order by
        u1_0.created_at desc 
    limit
        ?, ?
2025-06-23 15:54:17 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        distinct f2_0.receiver_id 
    from
        friends f1_0 
    join
        friends f2_0 
            on f1_0.receiver_id=f2_0.sender_id 
    where
        f1_0.sender_id=? 
        and f1_0.status='ACCEPTED' 
        and f2_0.status='ACCEPTED' 
        and f2_0.receiver_id not in (select
            f3_0.receiver_id 
        from
            friends f3_0 
        where
            (f3_0.sender_id=? 
            or f3_0.receiver_id=?)) 
        and f2_0.receiver_id<>?
2025-06-23 15:54:17 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id in (?) 
    order by
        u1_0.created_at desc 
    limit
        ?, ?
2025-06-23 15:54:31 [MessageBroker-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:54:32 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        distinct f2_0.receiver_id 
    from
        friends f1_0 
    join
        friends f2_0 
            on f1_0.receiver_id=f2_0.sender_id 
    where
        f1_0.sender_id=? 
        and f1_0.status='ACCEPTED' 
        and f2_0.status='ACCEPTED' 
        and f2_0.receiver_id not in (select
            f3_0.receiver_id 
        from
            friends f3_0 
        where
            (f3_0.sender_id=? 
            or f3_0.receiver_id=?)) 
        and f2_0.receiver_id<>?
2025-06-23 15:54:32 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id in (?) 
    order by
        u1_0.created_at desc 
    limit
        ?, ?
2025-06-23 15:54:36 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        distinct f2_0.receiver_id 
    from
        friends f1_0 
    join
        friends f2_0 
            on f1_0.receiver_id=f2_0.sender_id 
    where
        f1_0.sender_id=? 
        and f1_0.status='ACCEPTED' 
        and f2_0.status='ACCEPTED' 
        and f2_0.receiver_id not in (select
            f3_0.receiver_id 
        from
            friends f3_0 
        where
            (f3_0.sender_id=? 
            or f3_0.receiver_id=?)) 
        and f2_0.receiver_id<>?
2025-06-23 15:54:36 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id in (?) 
    order by
        u1_0.created_at desc 
    limit
        ?, ?
2025-06-23 15:54:46 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        distinct f2_0.receiver_id 
    from
        friends f1_0 
    join
        friends f2_0 
            on f1_0.receiver_id=f2_0.sender_id 
    where
        f1_0.sender_id=? 
        and f1_0.status='ACCEPTED' 
        and f2_0.status='ACCEPTED' 
        and f2_0.receiver_id not in (select
            f3_0.receiver_id 
        from
            friends f3_0 
        where
            (f3_0.sender_id=? 
            or f3_0.receiver_id=?)) 
        and f2_0.receiver_id<>?
2025-06-23 15:54:46 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id in (?) 
    order by
        u1_0.created_at desc 
    limit
        ?, ?
2025-06-23 15:55:31 [MessageBroker-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:55:38 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        distinct f2_0.receiver_id 
    from
        friends f1_0 
    join
        friends f2_0 
            on f1_0.receiver_id=f2_0.sender_id 
    where
        f1_0.sender_id=? 
        and f1_0.status='ACCEPTED' 
        and f2_0.status='ACCEPTED' 
        and f2_0.receiver_id not in (select
            f3_0.receiver_id 
        from
            friends f3_0 
        where
            (f3_0.sender_id=? 
            or f3_0.receiver_id=?)) 
        and f2_0.receiver_id<>?
2025-06-23 15:55:38 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id in (?) 
    order by
        u1_0.created_at desc 
    limit
        ?, ?
2025-06-23 15:56:31 [MessageBroker-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:57:31 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:58:31 [MessageBroker-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 15:59:31 [MessageBroker-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 16:00:30 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-06-23 16:00:30 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@43443721]]
2025-06-23 16:00:30 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-06-23 16:00:30 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-23 16:00:30 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-23 16:00:30 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-23 16:00:33 [main] INFO  backend.example.mxh.MxhApplication - Starting MxhApplication using Java 22.0.2 with PID 32088 (D:\mxh\target\classes started by Admin in D:\mxh)
2025-06-23 16:00:33 [main] DEBUG backend.example.mxh.MxhApplication - Running with Spring Boot v3.2.4, Spring v6.1.5
2025-06-23 16:00:33 [main] INFO  backend.example.mxh.MxhApplication - The following 1 profile is active: "dev"
2025-06-23 16:00:34 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-23 16:00:34 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 81 ms. Found 11 JPA repository interfaces.
2025-06-23 16:00:35 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-23 16:00:35 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2006 ms
2025-06-23 16:00:35 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-23 16:00:35 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.4.Final
2025-06-23 16:00:36 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-23 16:00:36 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-23 16:00:36 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-23 16:00:36 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@62c47480
2025-06-23 16:00:36 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-23 16:00:36 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-23 16:00:36 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-23 16:00:37 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-23 16:00:37 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-23 16:00:38 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-23 16:00:39 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-23 16:00:40 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-06-23 16:00:40 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Starting...
2025-06-23 16:00:40 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=true, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@659d72ca]]
2025-06-23 16:00:40 [main] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Started.
2025-06-23 16:00:40 [main] INFO  backend.example.mxh.MxhApplication - Started MxhApplication in 7.484 seconds (process running for 7.976)
2025-06-23 16:00:40 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 16:00:43 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        distinct f2_0.id,
        f2_0.created_at,
        f2_0.receiver_id,
        f2_0.sender_id,
        f2_0.status,
        f2_0.updated_at 
    from
        friends f1_0 
    join
        friends f2_0 
            on f1_0.receiver_id=f2_0.sender_id 
    where
        f1_0.sender_id=? 
        and f1_0.status='ACCEPTED' 
        and f2_0.status='ACCEPTED' 
        and f2_0.receiver_id not in (select
            f3_0.receiver_id 
        from
            friends f3_0 
        where
            (f3_0.sender_id=? 
            or f3_0.receiver_id=?)) 
        and f2_0.receiver_id<>?
2025-06-23 16:00:43 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id in (?) 
    order by
        u1_0.created_at desc 
    limit
        ?, ?
2025-06-23 16:01:40 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 16:02:40 [MessageBroker-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 16:03:40 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 16:04:40 [MessageBroker-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 16:05:40 [MessageBroker-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 16:06:40 [MessageBroker-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 16:07:06 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        distinct f2_0.id,
        f2_0.created_at,
        f2_0.receiver_id,
        f2_0.sender_id,
        f2_0.status,
        f2_0.updated_at 
    from
        friends f1_0 
    join
        friends f2_0 
            on f1_0.receiver_id=f2_0.sender_id 
    where
        f1_0.sender_id=? 
        and f1_0.status='ACCEPTED' 
        and f2_0.status='ACCEPTED' 
        and f2_0.receiver_id not in (select
            f3_0.receiver_id 
        from
            friends f3_0 
        where
            (f3_0.sender_id=? 
            or f3_0.receiver_id=?)) 
        and f2_0.receiver_id<>?
2025-06-23 16:07:06 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.id in (?) 
    order by
        u1_0.created_at desc 
    limit
        ?, ?
2025-06-23 16:07:40 [MessageBroker-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 16:08:40 [MessageBroker-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 16:09:40 [MessageBroker-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 16:10:40 [MessageBroker-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 16:11:40 [MessageBroker-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.account_status,
        u1_0.avatar_url,
        u1_0.bio,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.last_active,
        u1_0.password,
        u1_0.phone_number,
        u1_0.public_id,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username 
    from
        user u1_0 
    where
        u1_0.status=? 
        and u1_0.last_active<?
2025-06-23 16:12:19 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopping...
2025-06-23 16:12:19 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - BrokerAvailabilityEvent[available=false, SimpleBrokerMessageHandler [org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry@659d72ca]]
2025-06-23 16:12:19 [SpringApplicationShutdownHook] INFO  o.s.m.s.b.SimpleBrokerMessageHandler - Stopped.
2025-06-23 16:12:19 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-23 16:12:19 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-23 16:12:19 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
